From 1535b50e81ee160f2e3b941a1e7e0ab046ee8698 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marek=20Marczykowski-G=C3=B3recki?=
 <marmarek@invisiblethingslab.com>
Date: Sat, 27 Apr 2024 02:49:00 +0200
Subject: [PATCH 3/4] qubes: Drop custom vendor and version check
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

fwupd verifies if firmware matches the device, skip the custom check
that is much less robust. This avoids issues when firmware vendor
changes some of the metadata like Framework did, but also the DMI
parsing in the script doesn't match what fwupd does for example
regarding version formatting.

Signed-off-by: Marek Marczykowski-GÃ³recki <marmarek@invisiblethingslab.com>
---
 contrib/qubes/src/qubes_fwupdmgr.py       | 47 -----------------------
 contrib/qubes/test/test_qubes_fwupdmgr.py | 45 ----------------------
 2 files changed, 92 deletions(-)

diff --git a/contrib/qubes/src/qubes_fwupdmgr.py b/contrib/qubes/src/qubes_fwupdmgr.py
index b4bf5e679..e070a4438 100755
--- a/contrib/qubes/src/qubes_fwupdmgr.py
+++ b/contrib/qubes/src/qubes_fwupdmgr.py
@@ -317,47 +317,6 @@ class QubesFwupdmgr(FwupdHeads, FwupdUpdate, FwupdReceiveUpdates):
         if p.returncode != 0:
             raise Exception("fwupd-qubes: Firmware update failed")
 
-    def _read_dmi(self):
-        """Reads BIOS information from DMI."""
-        cmd_dmidecode_version = ["dmidecode", "-s", "bios-version"]
-        p = subprocess.Popen(cmd_dmidecode_version, stdout=subprocess.PIPE)
-        p.wait()
-        self.dmi_version = p.communicate()[0].decode()
-        cmd_dmidecode = ["dmidecode", "-t", "bios"]
-        p = subprocess.Popen(cmd_dmidecode, stdout=subprocess.PIPE)
-        p.wait()
-        if p.returncode != 0:
-            raise Exception("dmidecode: Reading DMI failed")
-        return p.communicate()[0].decode()
-
-    def _verify_dmi(self, arch_path, version, downgrade=False):
-        """Verifies DMI tables for BIOS updates.
-
-        Keywords arguments:
-        arch_path -- absolute path of the update archive
-        version -- version of the update
-        downgrade -- downgrade flag
-        """
-        dmi_info = self._read_dmi()
-        with tempfile.TemporaryDirectory() as tmpdir:
-            cmd_extract = ["gcab", "-x", f"--directory={tmpdir}", "--", arch_path]
-            p = subprocess.Popen(cmd_extract, stdout=subprocess.PIPE)
-            p.communicate()
-            if p.returncode != 0:
-                raise Exception(f"gcab: Error while extracting {arch_path}.")
-            path_metainfo = os.path.join(tmpdir, "firmware.metainfo.xml")
-            tree = ET.parse(path_metainfo)
-        root = tree.getroot()
-        vendor = root.find("developer_name").text
-        if vendor is None:
-            raise ValueError("No vendor information in firmware metainfo.")
-        if vendor not in dmi_info:
-            raise ValueError("Wrong firmware provider.")
-        if not downgrade and pversion.parse(version) <= pversion.parse(
-            self.dmi_version
-        ):
-            raise ValueError(f"{version} < {self.dmi_version} Downgrade not allowed")
-
     def _get_dom0_updates(self):
         """Gathers information about available updates."""
         cmd_get_dom0_updates = [FWUPDMGR, "--json", "get-updates"]
@@ -400,7 +359,6 @@ class QubesFwupdmgr(FwupdHeads, FwupdUpdate, FwupdReceiveUpdates):
         self._download_firmware_updates(self.url, self.sha, whonix=whonix)
         if self.name == "System Firmware":
             Path(BIOS_UPDATE_FLAG).touch(mode=0o644, exist_ok=True)
-            self._verify_dmi(self.arch_path, self.version)
         self._install_dom0_firmware_update(self.arch_path)
 
     def _parse_downgrades(self, device_list):
@@ -469,11 +427,6 @@ class QubesFwupdmgr(FwupdHeads, FwupdUpdate, FwupdReceiveUpdates):
         self._download_firmware_updates(downgrade_url, downgrade_sha, whonix=whonix)
         if downgrade["Name"] == "System Firmware":
             Path(BIOS_UPDATE_FLAG).touch(mode=0o644, exist_ok=True)
-            self._verify_dmi(
-                self.arch_path,
-                downgrade["Version"],
-                downgrade=True,
-            )
         self._install_dom0_firmware_downgrade(self.arch_path)
 
     def _output_crawler(self, updev_dict, level, help_f=False):
diff --git a/contrib/qubes/test/test_qubes_fwupdmgr.py b/contrib/qubes/test/test_qubes_fwupdmgr.py
index 4d1cc745b..6d79058fb 100755
--- a/contrib/qubes/test/test_qubes_fwupdmgr.py
+++ b/contrib/qubes/test/test_qubes_fwupdmgr.py
@@ -281,51 +281,6 @@ class TestQubesFwupdmgr(unittest.TestCase):
             self.assertEqual(help_log.read(), help_output.getvalue().strip() + "\n")
         sys.stdout = self.captured_output
 
-    @patch(
-        "test.test_qubes_fwupdmgr.qfwupd.QubesFwupdmgr._read_dmi",
-        return_value=DMI_DECODE,
-    )
-    def test_verify_dmi(self, output):
-        self.q.dmi_version = "P.1.0"
-        with tempfile.TemporaryDirectory() as tmpdir:
-            arch_name = tmpdir + "/firmware.cab"
-            subprocess.check_call(
-                ["gcab", "-c", arch_name, "firmware.metainfo.xml"], cwd="test/logs"
-            )
-            self.q._verify_dmi(arch_name, "P1.1")
-
-    @patch(
-        "test.test_qubes_fwupdmgr.qfwupd.QubesFwupdmgr._read_dmi",
-        return_value=DMI_DECODE,
-    )
-    def test_verify_dmi_wrong_vendor(self, output):
-        with self.assertRaises(ValueError) as wrong_vendor:
-            self.q.dmi_version = "P.1.0"
-            with tempfile.TemporaryDirectory() as tmpdir:
-                arch_name = tmpdir + "/firmware.cab"
-                subprocess.check_call(
-                    ["gcab", "-c", arch_name, "firmware.metainfo.xml"],
-                    cwd="test/logs/metainfo_name",
-                )
-                self.q._verify_dmi(arch_name, "P1.1")
-        self.assertIn("Wrong firmware provider.", str(wrong_vendor.exception))
-
-    @patch(
-        "test.test_qubes_fwupdmgr.qfwupd.QubesFwupdmgr._read_dmi",
-        return_value=DMI_DECODE,
-    )
-    def test_verify_dmi_version(self, output):
-        self.q.dmi_version = "P1.0"
-        with self.assertRaises(ValueError) as downgrade:
-            with tempfile.TemporaryDirectory() as tmpdir:
-                arch_name = tmpdir + "/firmware.cab"
-                subprocess.check_call(
-                    ["gcab", "-c", arch_name, "firmware.metainfo.xml"],
-                    cwd="test/logs/metainfo_version",
-                )
-                self.q._verify_dmi(arch_name, "P0.1")
-        self.assertIn("P0.1 < P1.0 Downgrade not allowed", str(downgrade.exception))
-
     @unittest.skipUnless(device_connected_dom0(), REQUIRED_DEV)
     def test_downgrade_firmware_dom0(self):
         old_version = None
-- 
2.44.0

